Usage:
  lnd [OPTIONS]

Application Options:
  -V, --version                                               Display version information and exit
      --lnddir=                                               The base directory that contains lnd's data, logs, configuration file, etc. (default: /root/.lnd)
  -C, --configfile=                                           Path to configuration file (default: /root/.lnd/lnd.conf)
  -b, --datadir=                                              The directory to store lnd's data within (default: /root/.lnd/data)
      --sync-freelist                                         Whether the databases used within lnd should sync their freelist to disk. This is disabled by default resulting in improved memory performance during operation, but with an increase in startup time.
      --tlscertpath=                                          Path to write the TLS certificate for lnd's RPC and REST services (default: /root/.lnd/tls.cert)
      --tlskeypath=                                           Path to write the TLS private key for lnd's RPC and REST services (default: /root/.lnd/tls.key)
      --tlsextraip=                                           Adds an extra ip to the generated certificate
      --tlsextradomain=                                       Adds an extra domain to the generated certificate
      --tlsautorefresh                                        Re-generate TLS certificate and key if the IPs or domains are changed
      --tlsdisableautofill                                    Do not include the interface IPs or the system hostname in TLS certificate, use first --tlsextradomain as Common Name instead, if set
      --no-macaroons                                          Disable macaroon authentication, can only be used if server is not listening on a public interface.
      --adminmacaroonpath=                                    Path to write the admin macaroon for lnd's RPC and REST services if it doesn't exist
      --readonlymacaroonpath=                                 Path to write the read-only macaroon for lnd's RPC and REST services if it doesn't exist
      --invoicemacaroonpath=                                  Path to the invoice-only macaroon for lnd's RPC and REST services if it doesn't exist
      --logdir=                                               Directory to log output. (default: /root/.lnd/logs)
      --maxlogfiles=                                          Maximum logfiles to keep (0 for no rotation) (default: 3)
      --maxlogfilesize=                                       Maximum logfile size in MB (default: 10)
      --acceptortimeout=                                      Time after which an RPCAcceptor will time out and return false if it hasn't yet received a response (default: 15s)
      --letsencryptdir=                                       The directory to store Let's Encrypt certificates within (default: /root/.lnd/letsencrypt)
      --letsencryptlisten=                                    The IP:port on which lnd will listen for Let's Encrypt challenges. Let's Encrypt will always try to contact on port 80. Often non-root processes are not allowed to bind to ports lower than 1024. This
                                                              configuration option allows a different port to be used, but must be used in combination with port forwarding from port 80. This configuration can also be used to specify another IP address to listen on,
                                                              for example an IPv6 address. (default: :80)
      --letsencryptdomain=                                    Request a Let's Encrypt certificate for this domain. Note that the certicate is only requested and stored when the first rpc connection comes in.
      --rpclisten=                                            Add an interface/port/socket to listen for RPC connections
      --restlisten=                                           Add an interface/port/socket to listen for REST connections
      --listen=                                               Add an interface/port to listen for peer connections
      --externalip=                                           Add an ip:port to the list of local addresses we claim to listen on to peers. If a port is not specified, the default (9735) will be used regardless of other parameters
      --externalhosts=                                        A set of hosts that should be periodically resolved to announce IPs for
      --restcors=                                             Add an ip:port/hostname to allow cross origin access from. To allow all origins, set as "*".
      --nolisten                                              Disable listening for incoming peer connections
      --norest                                                Disable REST API
      --no-rest-tls                                           Disable TLS for REST connections
      --nat                                                   Toggle NAT traversal support (using either UPnP or NAT-PMP) to automatically advertise your external IP address to the network -- NOTE this does not support devices behind multiple NATs
      --minbackoff=                                           Shortest backoff when reconnecting to persistent peers. Valid time units are {s, m, h}. (default: 1s)
      --maxbackoff=                                           Longest backoff when reconnecting to persistent peers. Valid time units are {s, m, h}. (default: 1h0m0s)
      --connectiontimeout=                                    The timeout value for network connections. Valid time units are {ms, s, m, h}. (default: 2m0s)
  -d, --debuglevel=                                           Logging level for all subsystems {trace, debug, info, warn, error, critical} -- You may also specify <global-level>,<subsystem>=<level>,<subsystem2>=<level>,... to set the log level for individual
                                                              subsystems -- Use show to list available subsystems (default: info)
      --cpuprofile=                                           Write CPU profile to the specified file
      --profile=                                              Enable HTTP profiling on given port -- NOTE port must be between 1024 and 65535
      --unsafe-disconnect                                     DEPRECATED: Allows the rpcserver to intentionally disconnect from peers with open channels. THIS FLAG WILL BE REMOVED IN 0.10.0
      --unsafe-replay                                         Causes a link to replay the adds on its commitment txn after starting up, this enables testing of the sphinx replay logic.
      --maxpendingchannels=                                   The maximum number of incoming pending channels permitted per peer. (default: 1)
      --backupfilepath=                                       The target location of the channel backup file
      --feeurl=                                               Optional URL for external fee estimation. If no URL is specified, the method for fee estimation will depend on the chosen backend and network.
      --nobootstrap                                           If true, then automatic network bootstrapping will not be attempted.
      --noseedbackup                                          If true, NO SEED WILL BE EXPOSED -- EVER, AND THE WALLET WILL BE ENCRYPTED USING THE DEFAULT PASSPHRASE. THIS FLAG IS ONLY FOR TESTING AND SHOULD NEVER BE USED ON MAINNET.
      --reset-wallet-transactions                             Removes all transaction history from the on-chain wallet on startup, forcing a full chain rescan starting at the wallet's birthday. Implements the same functionality as btcwallet's dropwtxmgr command.
                                                              Should be set to false after successful execution to avoid rescanning on every restart of lnd.
      --payments-expiration-grace-period=                     A period to wait before force closing channels with outgoing htlcs that have timed-out and are a result of this node initiated payments.
      --trickledelay=                                         Time in milliseconds between each release of announcements to the network (default: 90000)
      --chan-enable-timeout=                                  The duration that a peer connection must be stable before attempting to send a channel update to reenable or cancel a pending disables of the peer's channels on the network. (default: 19m0s)
      --chan-disable-timeout=                                 The duration that must elapse after first detecting that an already active channel is actually inactive and sending channel update disabling it to the network. The pending disable can be canceled if the
                                                              peer reconnects and becomes stable for chan-enable-timeout before the disable update is sent. (default: 20m0s)
      --chan-status-sample-interval=                          The polling interval between attempts to detect if an active channel has become inactive due to its peer going offline. (default: 1m0s)
      --height-hint-cache-query-disable                       Disable queries from the height-hint cache to try to recover channels stuck in the pending close state. Disabling height hint queries may cause longer chain rescans, resulting in a performance hit. Unset
                                                              this after channels are unstuck so you can get better performance again.
      --alias=                                                The node alias. Used as a moniker by peers and intelligence services
      --color=                                                The color of the node in hex format (i.e. '#3399FF'). Used to customize node appearance in intelligence services (default: #3399FF)
      --minchansize=                                          The smallest channel size (in satoshis) that we should accept. Incoming channels smaller than this will be rejected (default: 20000)
      --maxchansize=                                          The largest channel size (in satoshis) that we should accept. Incoming channels larger than this will be rejected
      --default-remote-max-htlcs=                             The default max_htlc applied when opening or accepting channels. This value limits the number of concurrent HTLCs that the remote party can add to the commitment. The maximum possible value is 483.
                                                              (default: 483)
      --numgraphsyncpeers=                                    The number of peers that we should receive new graph updates from. This option can be tuned to save bandwidth for light clients or routing nodes. (default: 3)
      --historicalsyncinterval=                               The polling interval between historical graph sync attempts. Each historical graph sync attempt ensures we reconcile with the remote peer's graph from the genesis block. (default: 1h0m0s)
      --ignore-historical-gossip-filters                      If true, will not reply with historical data that matches the range specified by a remote peer's gossip_timestamp_filter. Doing so will result in lower memory and bandwidth requirements.
      --rejectpush                                            If true, lnd will not accept channel opening requests with non-zero push amounts. This should prevent accidental pushes to merchant nodes.
      --rejecthtlc                                            If true, lnd will not forward any HTLCs that are meant as onward payments. This option will still allow lnd to send HTLCs and receive HTLCs but lnd won't be used as a hop.
      --stagger-initial-reconnect                             If true, will apply a randomized staggering between 0s and 30s when reconnecting to persistent peers on startup. The first 10 reconnections will be attempted instantly, regardless of the flag's value
      --max-cltv-expiry=                                      The maximum number of blocks funds could be locked up for when forwarding payments. (default: 2016)
      --max-channel-fee-allocation=                           The maximum percentage of total funds that can be allocated to a channel's commitment fee. This only applies for the initiator of the channel. Valid values are within [0.1, 1]. (default: 0.5)
      --max-commit-fee-rate-anchors=                          The maximum fee rate in sat/vbyte that will be used for commitments of channels of the anchors type. Must be large enough to ensure transaction propagation (default: 10)
      --dry-run-migration                                     If true, lnd will abort committing a migration if it would otherwise have been successful. This leaves the database unmodified, and still compatible with the previously active version of lnd.
      --enable-upfront-shutdown                               If true, option upfront shutdown script will be enabled. If peers that we open channels with support this feature, we will automatically set the script to which cooperative closes should be paid out to on
                                                              channel open. This offers the partial protection of a channel peer disconnecting from us if cooperative close is attempted with a different script.
      --accept-keysend                                        If true, spontaneous payments through keysend will be accepted. [experimental]
      --keysend-hold-time=                                    If non-zero, keysend payments are accepted but not immediately settled. If the payment isn't settled manually after the specified time, it is canceled automatically. [experimental]
      --gc-canceled-invoices-on-startup                       If true, we'll attempt to garbage collect canceled invoices upon start.
      --gc-canceled-invoices-on-the-fly                       If true, we'll delete newly canceled invoices on the fly.
      --allow-circular-route                                  If true, our node will allow htlc forwards that arrive and depart on the same channel.

Bitcoin:
      --bitcoin.active                                        If the chain should be active or not.
      --bitcoin.chaindir=                                     The directory to store the chain's data within.
      --bitcoin.node=[btcd|bitcoind|neutrino|ltcd|litecoind]  The blockchain interface to use. (default: btcd)
      --bitcoin.mainnet                                       Use the main network
      --bitcoin.testnet                                       Use the test network
      --bitcoin.simnet                                        Use the simulation test network
      --bitcoin.regtest                                       Use the regression test network
      --bitcoin.defaultchanconfs=                             The default number of confirmations a channel must have before it's considered open. If this is not set, we will scale the value according to the channel size.
      --bitcoin.defaultremotedelay=                           The default number of blocks we will require our channel counterparty to wait before accessing its funds in case of unilateral close. If this is not set, we will scale the value according to the channel
                                                              size.
      --bitcoin.maxlocaldelay=                                The maximum blocks we will allow our funds to be timelocked before accessing its funds in case of unilateral close. If a peer proposes a value greater than this, we will reject the channel. (default: 10000)
      --bitcoin.minhtlc=                                      The smallest HTLC we are willing to accept on our channels, in millisatoshi (default: 1)
      --bitcoin.minhtlcout=                                   The smallest HTLC we are willing to send out on our channels, in millisatoshi (default: 1000)
      --bitcoin.basefee=                                      The base fee in millisatoshi we will charge for forwarding payments on our channels (default: 1000)
      --bitcoin.feerate=                                      The fee rate used when forwarding payments on our channels. The total fee charged is basefee + (amount * feerate / 1000000), where amount is the forwarded amount. (default: 1)
      --bitcoin.timelockdelta=                                The CLTV delta we will subtract from a forwarded HTLC's timelock value (default: 40)
      --bitcoin.dnsseed=                                      The seed DNS server(s) to use for initial peer discovery. Must be specified as a '<primary_dns>[,<soa_primary_dns>]' tuple where the SOA address is needed for DNS resolution through Tor but is optional for
                                                              clearnet users. Multiple tuples can be specified, will overwrite the default seed servers.

btcd:
      --btcd.dir=                                             The base directory that contains the node's data, logs, configuration file, etc. (default: /root/.btcd)
      --btcd.rpchost=                                         The daemon's rpc listening address. If a port is omitted, then the default port for the selected chain parameters will be used. (default: localhost)
      --btcd.rpcuser=                                         Username for RPC connections
      --btcd.rpcpass=                                         Password for RPC connections
      --btcd.rpccert=                                         File containing the daemon's certificate file (default: /root/.btcd/rpc.cert)
      --btcd.rawrpccert=                                      The raw bytes of the daemon's PEM-encoded certificate chain which will be used to authenticate the RPC connection.

bitcoind:
      --bitcoind.dir=                                         The base directory that contains the node's data, logs, configuration file, etc. (default: /root/.bitcoin)
      --bitcoind.rpchost=                                     The daemon's rpc listening address. If a port is omitted, then the default port for the selected chain parameters will be used. (default: localhost)
      --bitcoind.rpcuser=                                     Username for RPC connections
      --bitcoind.rpcpass=                                     Password for RPC connections
      --bitcoind.zmqpubrawblock=                              The address listening for ZMQ connections to deliver raw block notifications
      --bitcoind.zmqpubrawtx=                                 The address listening for ZMQ connections to deliver raw transaction notifications
      --bitcoind.estimatemode=                                The fee estimate mode. Must be either ECONOMICAL or CONSERVATIVE. (default: CONSERVATIVE)

neutrino:
  -a, --neutrino.addpeer=                                     Add a peer to connect with at startup
      --neutrino.connect=                                     Connect only to the specified peers at startup
      --neutrino.maxpeers=                                    Max number of inbound and outbound peers
      --neutrino.banduration=                                 How long to ban misbehaving peers.  Valid time units are {s, m, h}.  Minimum 1 second
      --neutrino.banthreshold=                                Maximum allowed ban score before disconnecting and banning misbehaving peers.
      --neutrino.feeurl=                                      DEPRECATED: Optional URL for fee estimation. If a URL is not specified, static fees will be used for estimation.
      --neutrino.assertfilterheader=                          Optional filter header in height:hash format to assert the state of neutrino's filter header chain on startup. If the assertion does not hold, then the filter header chain will be re-synced from the genesis
                                                              block.
      --neutrino.useragentname=                               Used to help identify ourselves to other bitcoin peers (default: neutrino)
      --neutrino.useragentversion=                            Used to help identify ourselves to other bitcoin peers (default: 0.11.0-beta)

Litecoin:
      --litecoin.active                                       If the chain should be active or not.
      --litecoin.chaindir=                                    The directory to store the chain's data within.
      --litecoin.node=[btcd|bitcoind|neutrino|ltcd|litecoind] The blockchain interface to use. (default: ltcd)
      --litecoin.mainnet                                      Use the main network
      --litecoin.testnet                                      Use the test network
      --litecoin.simnet                                       Use the simulation test network
      --litecoin.regtest                                      Use the regression test network
      --litecoin.defaultchanconfs=                            The default number of confirmations a channel must have before it's considered open. If this is not set, we will scale the value according to the channel size.
      --litecoin.defaultremotedelay=                          The default number of blocks we will require our channel counterparty to wait before accessing its funds in case of unilateral close. If this is not set, we will scale the value according to the channel
                                                              size.
      --litecoin.maxlocaldelay=                               The maximum blocks we will allow our funds to be timelocked before accessing its funds in case of unilateral close. If a peer proposes a value greater than this, we will reject the channel. (default: 10000)
      --litecoin.minhtlc=                                     The smallest HTLC we are willing to accept on our channels, in millisatoshi (default: 1)
      --litecoin.minhtlcout=                                  The smallest HTLC we are willing to send out on our channels, in millisatoshi (default: 1000)
      --litecoin.basefee=                                     The base fee in millisatoshi we will charge for forwarding payments on our channels (default: 1000)
      --litecoin.feerate=                                     The fee rate used when forwarding payments on our channels. The total fee charged is basefee + (amount * feerate / 1000000), where amount is the forwarded amount. (default: 1)
      --litecoin.timelockdelta=                               The CLTV delta we will subtract from a forwarded HTLC's timelock value (default: 576)
      --litecoin.dnsseed=                                     The seed DNS server(s) to use for initial peer discovery. Must be specified as a '<primary_dns>[,<soa_primary_dns>]' tuple where the SOA address is needed for DNS resolution through Tor but is optional for
                                                              clearnet users. Multiple tuples can be specified, will overwrite the default seed servers.

ltcd:
      --ltcd.dir=                                             The base directory that contains the node's data, logs, configuration file, etc. (default: /root/.ltcd)
      --ltcd.rpchost=                                         The daemon's rpc listening address. If a port is omitted, then the default port for the selected chain parameters will be used. (default: localhost)
      --ltcd.rpcuser=                                         Username for RPC connections
      --ltcd.rpcpass=                                         Password for RPC connections
      --ltcd.rpccert=                                         File containing the daemon's certificate file (default: /root/.ltcd/rpc.cert)
      --ltcd.rawrpccert=                                      The raw bytes of the daemon's PEM-encoded certificate chain which will be used to authenticate the RPC connection.

litecoind:
      --litecoind.dir=                                        The base directory that contains the node's data, logs, configuration file, etc. (default: /root/.litecoin)
      --litecoind.rpchost=                                    The daemon's rpc listening address. If a port is omitted, then the default port for the selected chain parameters will be used. (default: localhost)
      --litecoind.rpcuser=                                    Username for RPC connections
      --litecoind.rpcpass=                                    Password for RPC connections
      --litecoind.zmqpubrawblock=                             The address listening for ZMQ connections to deliver raw block notifications
      --litecoind.zmqpubrawtx=                                The address listening for ZMQ connections to deliver raw transaction notifications
      --litecoind.estimatemode=                               The fee estimate mode. Must be either ECONOMICAL or CONSERVATIVE. (default: CONSERVATIVE)

Autopilot:
      --autopilot.active                                      If the autopilot agent should be active or not.
      --autopilot.heuristic=                                  Heuristic to activate, and the weight to give it during scoring. (default: {top_centrality:1})
      --autopilot.maxchannels=                                The maximum number of channels that should be created (default: 5)
      --autopilot.allocation=                                 The percentage of total funds that should be committed to automatic channel establishment (default: 0.6)
      --autopilot.minchansize=                                The smallest channel that the autopilot agent should create (default: 20000)
      --autopilot.maxchansize=                                The largest channel that the autopilot agent should create (default: 16777215)
      --autopilot.private                                     Whether the channels created by the autopilot agent should be private or not. Private channels won't be announced to the network.
      --autopilot.minconfs=                                   The minimum number of confirmations each of your inputs in funding transactions created by the autopilot agent must have. (default: 1)
      --autopilot.conftarget=                                 The confirmation target (in blocks) for channels opened by autopilot. (default: 3)

Tor:
      --tor.active                                            Allow outbound and inbound connections to be routed through Tor
      --tor.socks=                                            The host:port that Tor's exposed SOCKS5 proxy is listening on (default: localhost:9050)
      --tor.dns=                                              The DNS server as host:port that Tor will use for SRV queries - NOTE must have TCP resolution enabled (default: soa.nodes.lightning.directory:53)
      --tor.streamisolation                                   Enable Tor stream isolation by randomizing user credentials for each connection.
      --tor.control=                                          The host:port that Tor is listening on for Tor control connections (default: localhost:9051)
      --tor.targetipaddress=                                  IP address that Tor should use as the target of the hidden service
      --tor.password=                                         The password used to arrive at the HashedControlPassword for the control port. If provided, the HASHEDPASSWORD authentication method will be used instead of the SAFECOOKIE one.
      --tor.v2                                                Automatically set up a v2 onion service to listen for inbound connections
      --tor.v3                                                Automatically set up a v3 onion service to listen for inbound connections
      --tor.privatekeypath=                                   The path to the private key of the onion service being created
      --tor.watchtowerkeypath=                                The path to the private key of the watchtower onion service being created

signrpc:
      --signrpc.signermacaroonpath=                           Path to the signer macaroon

walletrpc:
      --walletrpc.walletkitmacaroonpath=                      Path to the wallet kit macaroon

chainrpc:
      --chainrpc.notifiermacaroonpath=                        Path to the chain notifier macaroon

routerrpc:
      --routerrpc.minrtprob=                                  Minimum required route success probability to attempt the payment (default: 0.01)
      --routerrpc.apriorihopprob=                             Assumed success probability of a hop in a route when no other information is available. (default: 0.6)
      --routerrpc.aprioriweight=                              Weight of the a priori probability in success probability estimation. Valid values are in [0, 1]. (default: 0.5)
      --routerrpc.penaltyhalflife=                            Defines the duration after which a penalized node or channel is back at 50% probability (default: 1h0m0s)
      --routerrpc.attemptcost=                                The fixed (virtual) cost in sats of a failed payment attempt (default: 100)
      --routerrpc.attemptcostppm=                             The proportional (virtual) cost in sats of a failed payment attempt expressed in parts per million of the total payment amount (default: 1000)
      --routerrpc.maxmchistory=                               the maximum number of payment results that are held on disk by mission control (default: 1000)
      --routerrpc.routermacaroonpath=                         Path to the router macaroon

routing:
      --routing.assumechanvalid                               Skip checking channel spentness during graph validation. This speedup comes at the risk of using an unvalidated view of the network for routing. (default: false)

workers:
      --workers.read=                                         Maximum number of concurrent read pool workers. This number should be proportional to the number of peers. (default: 100)
      --workers.write=                                        Maximum number of concurrent write pool workers. This number should be proportional to the number of CPUs on the host.  (default: 8)
      --workers.sig=                                          Maximum number of concurrent sig pool workers. This number should be proportional to the number of CPUs on the host. (default: 8)

caches:
      --caches.reject-cache-size=                             Maximum number of entries contained in the reject cache, which is used to speed up filtering of new channel announcements and channel updates from peers. Each entry requires 25 bytes. (default: 50000)
      --caches.channel-cache-size=                            Maximum number of entries contained in the channel cache, which is used to reduce memory allocations from gossip queries from peers. Each entry requires roughly 2Kb. (default: 20000)

wtclient:
      --wtclient.active                                       Whether the daemon should use private watchtowers to back up revoked channel states.
      --wtclient.private-tower-uris=                          (Deprecated) Specifies the URIs of private watchtowers to use in backing up revoked states. URIs must be of the form <pubkey>@<addr>. Only 1 URI is supported at this time, if none are provided the tower
                                                              will not be enabled.
      --wtclient.sweep-fee-rate=                              Specifies the fee rate in sat/byte to be used when constructing justice transactions sent to the watchtower.

watchtower:
      --watchtower.active                                     If the watchtower should be active or not
      --watchtower.towerdir=                                  Directory of the watchtower.db (default: /root/.lnd/data/watchtower)
      --watchtower.listen=                                    Add interfaces/ports to listen for peer connections
      --watchtower.externalip=                                Add interfaces/ports where the watchtower can accept peer connections
      --watchtower.readtimeout=                               Duration the watchtower server will wait for messages to be received before hanging up on clients
      --watchtower.writetimeout=                              Duration the watchtower server will wait for messages to be written before hanging up on client connections

protocol:
      --protocol.wumbo-channels                               if set, then lnd will create and accept requests for channels larger chan 0.16 BTC
      --protocol.no-anchors                                   disable support for anchor commitments

chainbackend:
      --healthcheck.chainbackend.interval=                    How often to run a health check. (default: 1m0s)
      --healthcheck.chainbackend.attempts=                    The number of calls we will make for the check before failing. Set this value to 0 to disable a check. (default: 3)
      --healthcheck.chainbackend.timeout=                     The amount of time we allow the health check to take before failing due to timeout. (default: 10s)
      --healthcheck.chainbackend.backoff=                     The amount of time to back-off between failed health checks. (default: 30s)

diskspace:
      --healthcheck.diskspace.diskrequired=                   The minimum ratio of free disk space to total capacity that we allow before shutting lnd down safely. (default: 0.1)
      --healthcheck.diskspace.interval=                       How often to run a health check. (default: 12h0m0s)
      --healthcheck.diskspace.attempts=                       The number of calls we will make for the check before failing. Set this value to 0 to disable a check.
      --healthcheck.diskspace.timeout=                        The amount of time we allow the health check to take before failing due to timeout. (default: 5s)
      --healthcheck.diskspace.backoff=                        The amount of time to back-off between failed health checks. (default: 1m0s)

tls:
      --healthcheck.tls.interval=                             How often to run a health check. (default: 1m0s)
      --healthcheck.tls.attempts=                             The number of calls we will make for the check before failing. Set this value to 0 to disable a check.
      --healthcheck.tls.timeout=                              The amount of time we allow the health check to take before failing due to timeout. (default: 5s)
      --healthcheck.tls.backoff=                              The amount of time to back-off between failed health checks. (default: 1m0s)

db:
      --db.backend=                                           The selected database backend. (default: bolt)
      --db.batch-commit-interval=                             The maximum duration the channel graph batch schedulers will wait before attempting to commit a batch of pending updates. This can be tradeoff database contenion for commit latency. (default: 500ms)

etcd:
      --db.etcd.embedded                                      Use embedded etcd instance instead of the external one.
      --db.etcd.host=                                         Etcd database host.
      --db.etcd.user=                                         Etcd database user.
      --db.etcd.pass=                                         Password for the database user.
      --db.etcd.namespace=                                    The etcd namespace to use.
      --db.etcd.cert_file=                                    Path to the TLS certificate for etcd RPC.
      --db.etcd.key_file=                                     Path to the TLS private key for etcd RPC.
      --db.etcd.insecure_skip_verify                          Whether we intend to skip TLS verification
      --db.etcd.collect_stats                                 Whether to collect etcd commit stats.

bolt:
      --db.bolt.nofreelistsync                                Whether the databases used within lnd should sync their freelist to disk. This is disabled by default resulting in improved memory performance during operation, but with an increase in startup time.
      --db.bolt.auto-compact                                  Whether the databases used within lnd should automatically be compacted on every startup (and if the database has the configured minimum age). This is disabled by default because it requires additional disk
                                                              space to be available during the compaction that is freed afterwards. In general compaction leads to smaller database files.
      --db.bolt.auto-compact-min-age=                         How long ago the last compaction of a database file must be for it to be considered for auto compaction again. Can be set to 0 to compact on every startup. (default: 168h0m0s)
      --db.bolt.dbtimeout=                                    Specify the timeout value used when opening the database. (default: 1m0s)

Help Options:
  -h, --help                                                  Show this help message
